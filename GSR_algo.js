E.setFlags({pretokenise:1});

//main address
I2C_ADDR: 0b1001000;

////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//creates software I2C port for Espruino devices
function MCP3221(i2c) {
    this.i2c = i2c;
    this.ad = I2C_ADDR;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//basic function to read 8 bits (1 byte) from MAX30205 from a specified register via i2c
MCP3221.prototype.read8 = function(reg) {
    this.i2c.writeTo(this.ad, reg);
    return this.i2c.readFrom(this.ad,1);
};

//basic function to read 16 bits (2 bytes) from MAX30205 from a specified register via i2c
MAX30205.prototype.read16 = function(reg) {
    this.i2c.writeTo(this.ad, reg);
    return this.i2c.readFrom(this.ad,2);
};

//basic function to write 8 bits to a specified register in the MAX30205 via i2c
MAX30205.prototype.write8 = function(reg, value) {
    this.i2c.writeTo(this.ad, reg, value);
};


///////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//functions to connect library with espruino


exports.connect = function(i2c) {
  return new MCP3221(i2c);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
