E.setFlags({pretokenise:1});

//main address
const I2C_ADDR = 0b1001000;

//sampling time
const sampling_time = (1/500) * 1000;

//GSR Data Array
var gsr_data[100];

////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//creates software I2C port for Espruino devices
function GSR(i2c) {
    this.i2c = i2c;
    this.ad = I2C_ADDR;
}

////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////////////////////////////////////////////////////////////

//basic function to read 8 bits (1 byte) from MAX30205 from a specified register via i2c
GSR.prototype.read8 = function(reg) {
    this.i2c.writeTo(this.ad, reg);
    return this.i2c.readFrom(this.ad,1);
};

//basic function to write 8 bits to a specified register in the MAX30205 via i2c
GSR.prototype.write8 = function(reg, value) {
    this.i2c.writeTo(this.ad, reg, value);
};

///////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////

GSR.prototype.read_gsr = function(){
    setInterval(this.data_acquisition, sampling_time);
};



///////////////////////////////////////////////////////////////////////////////////////////////////////////
////////////////////////////////////////////////////////////////////////////////////////////////////////////
//functions to connect library with espruino


exports.connect = function(i2c) {
  return new GSR(i2c);
};

////////////////////////////////////////////////////////////////////////////////////////////////////////////
